#!/usr/bin/env python

import gmpy2

# https://class.coursera.org/crypto-009/forum/thread?thread_id=827
# gmpy2.get_context().precision = 1050


# | p - q | < 2 * N ^ (1/4)
# p < sqrt(N) < A = (p+q)/2 < q
# x = sqrt(A**2 - N)

print 'Question 1'
# A - sqrt(N) < 1
# A = ceil(sqrt(N))
N = gmpy2.mpz(179769313486231590772930519078902473361797697894230657273430081157732675805505620686985379449212982959585501387537164015710139858647833778606925583497541085196591615128057575940752635007475935288710823649949940771895617054361149474865046711015101563940680527540071584560878577663743040086340742855278549092581)
A = gmpy2.isqrt(N) + 1
x = gmpy2.isqrt(A * A - N)
p = A - x
q = A + x
assert p * q == N

print p
# correct answer
assert p == 13407807929942597099574024998205846127479365820592393377723561443721764030073662768891111614362326998675040546094339320838419523375986027530441562135724301

# save variables for Question 4
N1 = N
p1 = p
q1 = q

print 'Queston 2'
# A - sqrt(N) < 2^20
N = gmpy2.mpz(648455842808071669662824265346772278726343720706976263060439070378797308618081116462714015276061417569195587321840254520655424906719892428844841839353281972988531310511738648965962582821502504990264452100885281673303711142296421027840289307657458645233683357077834689715838646088239640236866252211790085787877)

p = None
q = None

for i in range(1, 2**20):
    A = gmpy2.isqrt(N) + i
    x = gmpy2.isqrt(A * A - N)
    p = A - x
    q = A + x
    if p * q == N:
        break
assert p * q == N

print p
# correct answer
assert p == 25464796146996183438008816563973942229341454268524157846328581927885777969985222835143851073249573454107384461557193173304497244814071505790566593206419759


print 'Question 3'
# hint: make A an integer
# https://class.coursera.org/crypto-009/forum/thread?thread_id=828

# sqrt(6*N) close to 3p+2q / 2
# A = (3p+2q)/2
# A is not an integer. p,q are prime, then 3p+2q is odd and (3p+2q) is not an integer
# 2A is an integer

# 6p ---- 2A ------ 4q
# 6p = 2A - x
# 4q = 2A + x
# Let 2A = (6p + 4q) / 2
# 2A = ceil(sqrt(24N))

# N = pq = (2A-x)/6 * (2A-x)/4 = ((2A)^2 - x^2)/24
# 24N = (2A)^2 - x^2
# x = sqrt((2A)^2 - 24N)

N = gmpy2.mpz(720062263747350425279564435525583738338084451473999841826653057981916355690188337790423408664187663938485175264994017897083524079135686877441155132015188279331812309091996246361896836573643119174094961348524639707885238799396839230364676670221627018353299443241192173812729276147530748597302192751375739387929)
twoA = gmpy2.isqrt(24*N) + 1
x = gmpy2.isqrt(twoA * twoA - 24 * N)
p = (twoA - x) / 6
q = (twoA + x) / 4
assert p * q == N

print p
# correct answer
assert p == 21909849592475533092273988531583955898982176093344929030099423584127212078126150044721102570957812665127475051465088833555993294644190955293613411658629209


print 'Question 4'
c = 22096451867410381776306561134883418017410069787892831071731839143676135600120538004282329650473509424343946219751512256465839967942889460764542040581564748988013734864120452325229320176487916666402997509188729971690526083222067771600019329260870009579993724077458967773697817571267229951148662959627934791540
e = 65537

N = N1
p = p1
q = q1
assert p * q == N

phi = (p - 1) * (q - 1)
assert phi == N - p - q + 1

# e*d = 1 % phi
d = gmpy2.divm(1, e, phi)
assert (e * d) % phi == 1

# encrypt c = m^e in Zn
# decrypt m = c^d in Zn
m = gmpy2.powmod(c, d, N)
assert gmpy2.powmod(m, e, N) == c

hexstring = format(m, 'x')
hexstring = hexstring.split('00')[1]
plaintext = hexstring.decode('hex')

print plaintext
# correct answer
assert plaintext == 'Factoring lets us break RSA.'
